intLit    := [0-9]+
floatLit  := [0-9]*.[0-9]*
boolLit   := 'true' | 'false'
stringLit := '"' .+ '"'
arrayLit  := '[' (expr (',' expr)*)? ']'

statement := return | for | while | doWhile | if | scope | varDecl | functionDecl | expr

return  := 'return' expr?;
for 	:= 'for' '(' expr? ';' expr? ';' expr? ')' statement
while	:= 'while' '(' expr ')' statement
doWhile	:= 'do' statement 'while' '(' expr ')'
if		:= 'if' '(' expr ')' statement ('else' statement)?
scope   := '{' statement* '}'
varDecl := ('let' | 'var' | 'const') ID ('=' expr)?

functionDecl := 'function' ID '(' (type ID (',' type ID)*)? ')' scope

expr    := assign
assign 	:= select (('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=') assign)?
select  := lor ('?' select ':' select)?
lor 	:= land ('||' lor)?
land	:= nullCoal ('&&' land)?
nullCoal:= or ('??' nullCoal)?
or		:= xor ('|' or)?
xor		:= and ('^' xor)?
and		:= eq ('&' and)?
eq		:= comp (('==' | '!=') eq)?
comp	:= shift (('<' | '<=' | '>=' | '>') comp)?
shift	:= add (('<<' | '>>') shift)?
add		:= mul (('+' | '-') add)?
mul     := preFix (('*' | '/' | '%') mul)?
preFix  := ('++' | '--' | '+' | '-' | '!' | '~')* postFix
postFix := atom ('++' | '--' | call | '[' expr ']' )*
atom    := intLit | floatLit | boolLit | stringLit | arrayLit | ID | '`' (.* | '${' expr '}')* '`' | '(' expr ')'

call := '(' (expr (',' expr)*)? ')'
